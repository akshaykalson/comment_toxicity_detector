# -*- coding: utf-8 -*-
"""project_5_comment toxicity detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qIBLewXboy9WfBoCxbeJ5e3hs4v5N74j
"""

import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import sklearn
import os
import numpy as np

df = pd.read_csv('/content/train.csv')

df.head()

from tensorflow.keras.layers import TextVectorization

X = df['comment_text']
y = df[df.columns[2:]].values

MAX_FEATURES = 200000 # number of words in the vocab

# we are taking words and converting them to integers
vectorizer = TextVectorization(max_tokens=MAX_FEATURES,
                               output_sequence_length=1800,
                               output_mode='int')

vectorizer.adapt(X.values)

# vectorizer.get_vocabulary()

vectorized_text = vectorizer(X.values)

vectorized_text

#MCSHBAP - map, chache, shuffle, batch, prefetch  from_tensor_slices, list_file
dataset = tf.data.Dataset.from_tensor_slices((vectorized_text, y))
dataset = dataset.cache()
dataset = dataset.shuffle(160000)
dataset = dataset.batch(16)
dataset = dataset.prefetch(8) # helps bottlenecks

train = dataset.take(int(len(dataset)*.7))
val = dataset.skip(int(len(dataset)*.7)).take(int(len(dataset)*.2))
test = dataset.skip(int(len(dataset)*.9)).take(int(len(dataset)*.1))

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dropout, Bidirectional, Dense, Embedding

from keras.models import load_model


model = load_model('/content/toxicity_detector.h5')

# model = Sequential()
# # Create the embedding layer
# model.add(Embedding(MAX_FEATURES+1, 32))
# # Bidirectional LSTM Layer
# model.add(Bidirectional(LSTM(32, activation='tanh')))
# # Feature extractor Fully connected layers
# model.add(Dense(128, activation='relu'))
# model.add(Dense(256, activation='relu'))
# model.add(Dense(128, activation='relu'))
# # Final layer
# model.add(Dense(6, activation='sigmoid'))

# model.compile(loss='BinaryCrossentropy', optimizer='Adam')

model.summary()

# history = model.fit(train, epochs=1, validation_data=val)

input_text = vectorizer('you feaking suck ! I am going to hurt you')

model.predict(np.expand_dims(input_text,0))

# (res > 0.5).astype(int)

df.columns[2:]

# from tensorflow.keras.metrics import Precision, Recall, CategoricalAccuracy

# pre = Precision()
# re = Recall()
# acc = CategoricalAccuracy()

# for batch in test.as_numpy_iterator():
#     # Unpack the batch
#     X_true, y_true = batch
#     # Make a prediction
#     yhat = model.predict(X_true)

#     # Flatten the predictions
#     y_true = y_true.flatten()
#     yhat = yhat.flatten()

#     pre.update_state(y_true, yhat)
#     re.update_state(y_true, yhat)
#     acc.update_state(y_true, yhat)